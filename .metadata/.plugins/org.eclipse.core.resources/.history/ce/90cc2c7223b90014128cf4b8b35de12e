package assignment10.junit;

import java.awt.*;

import javax.swing.*;

import java.awt.event.*;
import java.util.Properties;

public class View extends JFrame implements ActionListener

{     
	private JPanel[][] pnlChessCells = new JPanel[8][8];
	private JPanel pnlMain = new JPanel(new GridLayout(8,8));
	private String[][] strChessBoard = new String[][] { 
		{"RB", "NB", "BB", "QB", "KB", "BB", "NB", "RB" },
		{"PB", "PB", "PB", "PB", "PB", "PB", "PB", "PB"}, 
		{"  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "}, 
		{"  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "}, 
		{"  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "}, 
		{"  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "}, 
		{"PW", "PW", "PW", "PW", "PW", "PW", "PW", "PW"}, 
		{"RW", "NW", "BW", "QW", "KW", "BW", "NW", "RW"} };
	private ImageIcon rookBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/rook_dark.png");
	private ImageIcon rookWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/rook_light.png");
	private ImageIcon bishopBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/bishop_dark.png");
	private ImageIcon bishopWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/bishop_light.png");
	private ImageIcon knightBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/knight_dark.png");
	private ImageIcon knightWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/knight_light.png");
	private ImageIcon kingBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/king_dark.png");
	private ImageIcon kingWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/king_light.png");
	private ImageIcon queenBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/queen_dark.png");
	private ImageIcon queenWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/queen_light.png");
	private ImageIcon pawnBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/pawn_dark.png");
	private ImageIcon pawnWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/pawn_light.png");

      /*public static void main(String[] args)
      {
    	  final View app = new View();             
      }*/

      // the whole constructor is for setting up the UI of the form

      public View()

      {

            c = getContentPane();

            setBounds(100, 100, 470, 495);

            setBackground(new Color(204, 204, 204));

            setDefaultCloseOperation(EXIT_ON_CLOSE);

            setTitle("Tutorial: How to Draw a Chess Board in Java");

            setResizable(false);

            c.setLayout(null);     

            pnlMain.setBounds(3, 3, 460, 460);

            pnlMain.setBackground(new Color(255, 255, 255));

            c.add(pnlMain);

            this.drawChessBoard();

            this.arrangeChessPieces();

            show();

      }
	    public void actionPerformed(ActionEvent e) {
	        JOptionPane.showMessageDialog(null,
	                    "I was clicked by "+e.getActionCommand(),
	                    "Title here", JOptionPane.INFORMATION_MESSAGE);
	    }


      private JLabel getPieceObject(String strPieceName)

      {

            JLabel lblTemp;

      if(strPieceName.equals("RB"))

            lblTemp = new JLabel(this.rookBlack);

      else if(strPieceName.equals("BB"))

            lblTemp = new JLabel(this.bishopBlack);

      else if(strPieceName.equals("NB"))

            lblTemp = new JLabel(this.knightBlack);

      else if(strPieceName.equals("QB"))

            lblTemp = new JLabel(this.queenBlack);

      else if(strPieceName.equals("KB"))

            lblTemp = new JLabel(this.kingBlack);

      else if(strPieceName.equals("PB"))

            lblTemp = new JLabel(this.pawnBlack);

      else if(strPieceName.equals("RW"))

            lblTemp = new JLabel(this.rookWhite);

      else if(strPieceName.equals("BW"))

            lblTemp =  new JLabel(this.bishopWhite);

      else if(strPieceName.equals("NW"))

            lblTemp = new JLabel(this.knightWhite);

      else if(strPieceName.equals("QW"))

            lblTemp = new JLabel(this.queenWhite);

      else if(strPieceName.equals("KW"))

            lblTemp = new JLabel(this.kingWhite);

      else if(strPieceName.equals("PW"))

            lblTemp = new JLabel(this.pawnWhite);

      else

            lblTemp = new JLabel();

            return lblTemp;

      }
     
      // This method reads strChessBoard two-dimensional array of string

      // and places chess pieces at their right positions

      private void arrangeChessPieces()

      {                      

            for(int y = 0; y < 8; y++)       

            for(int x = 0; x < 8; x++) 

            {                

                  this.pnlChessCells[y][x].add(this.getPieceObject(strChessBoard[y][x]), BorderLayout.CENTER);

                  this.pnlChessCells[y][x].validate();

            }          

      }

      // This method draws chess board, i.e. black and white cells on the board

      private void drawChessBoard()

      {

            for (int y = 0; y < 8; y++)

                  for (int x = 0; x < 8; x++)

                  {

                        pnlChessCells[y][x] = new JPanel(new BorderLayout());

                        //pnlChessCells[y][x].addMouseListener(this);

                        pnlMain.add(pnlChessCells[y][x]);

                        if (y % 2 == 0)

                              if (x % 2 != 0)

                                    pnlChessCells[y][x].setBackground(Color.LIGHT_GRAY);

                              else

                                    pnlChessCells[y][x].setBackground(Color.WHITE);

                        else

                              if (x % 2 == 0)

                                    pnlChessCells[y][x].setBackground(Color.LIGHT_GRAY);

                              else

                                    pnlChessCells[y][x].setBackground(Color.WHITE);

                  }

      }

      /*public void mouseEntered(MouseEvent e){} 

      public void mouseReleased(MouseEvent e){}

      public void mouseExited(MouseEvent e){}  

      public void mousePressed(MouseEvent e){}
      
      private Point pntMoveFrom, pntMoveTo;
      
      private boolean boolMoveSelection = false, bWhite = true, bMyTurn = true;
      */

}
