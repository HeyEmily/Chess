package assignment10.junit;

import java.awt.*;

import javax.swing.*;

import java.awt.event.*;
import java.util.Properties;

public class View extends JFrame implements ActionListener
{     
	private Container myPanel;
	private JPanel[][] pnlChessCells = new JPanel[8][8];
	private JPanel pnlMain = new JPanel(new GridLayout(8,8));
	/*private String[][] strChessBoard = new String[][] { 
		{"RB", "NB", "BB", "QB", "KB", "BB", "NB", "RB" },
		{"PB", "PB", "PB", "PB", "PB", "PB", "PB", "PB"}, 
		{"  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "}, 
		{"  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "}, 
		{"  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "}, 
		{"  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "}, 
		{"PW", "PW", "PW", "PW", "PW", "PW", "PW", "PW"}, 
		{"RW", "NW", "BW", "QW", "KW", "BW", "NW", "RW"} };*/
	private int[][] Pieces = new int[][]{
			{9, 10, 11, 12, 13, 14, 15, 16},
			{1,  2,  3,  4,  5,  6,  7,  8},
			{0,  0,  0,  0,  0,  0,  0,  0},
			{0,  0,  0,  0,  0,  0,  0,  0},
			{0,  0,  0,  0,  0,  0,  0,  0},
			{0,  0,  0,  0,  0,  0,  0,  0},
			{17, 18, 19, 20, 21, 22, 23, 24},
			{25, 26, 27, 28, 29, 30, 31, 32}
	};
	private ImageIcon rookBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/rook_dark.png");
	private ImageIcon rookWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/rook_light.png");
	private ImageIcon bishopBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/bishop_dark.png");
	private ImageIcon bishopWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/bishop_light.png");
	private ImageIcon knightBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/knight_dark.png");
	private ImageIcon knightWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/knight_light.png");
	private ImageIcon kingBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/king_dark.png");
	private ImageIcon kingWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/king_light.png");
	private ImageIcon queenBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/queen_dark.png");
	private ImageIcon queenWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/queen_light.png");
	private ImageIcon pawnBlack = new ImageIcon(System.getProperty("user.dir") + "/pieces/pawn_dark.png");
	private ImageIcon pawnWhite = new ImageIcon(System.getProperty("user.dir") + "/pieces/pawn_light.png");

      public static void main(String[] args)
      {
    	  final View app = new View();             
      }
      
      /*initialize the window*/
      public View()
      {
            myPanel = getContentPane();
            setBounds(300, 100, 500, 495);
            setBackground(new Color(204, 204, 204));
            setDefaultCloseOperation(EXIT_ON_CLOSE);
            setTitle("ChessBoard");
            setResizable(false);
            myPanel.setLayout(null);     
            pnlMain.setBounds(3, 3, 460, 460);
            pnlMain.setBackground(new Color(255, 255, 255));
            myPanel.add(pnlMain);
            this.drawChessBoard();
            this.arrangeChessPieces();
            show();

      }
	    public void actionPerformed(ActionEvent e) {
	        JOptionPane.showMessageDialog(null,
	                    "I was clicked by "+e.getActionCommand(),
	                    "Title here", JOptionPane.INFORMATION_MESSAGE);
	    }


      private JLabel getPieceObject(int PieceNum)
      {
            JLabel lbl;
      if(PieceNum == 9||PieceNum == 16)
            lbl = new JLabel(this.rookBlack);
      else if(PieceNum == 10||PieceNum == 15)
            lbl = new JLabel(this.bishopBlack);
      else if(PieceNum == 11||PieceNum == 14)
            lbl = new JLabel(this.knightBlack);
      else if(PieceNum == 12)
            lbl = new JLabel(this.queenBlack);
      else if(PieceNum == 13)
            lbl = new JLabel(this.kingBlack);
      else if(PieceNum >= 1 && PieceNum <= 8)
            lbl = new JLabel(this.pawnBlack);
      else if(PieceNum == 25 || PieceNum == 32)
            lbl = new JLabel(this.rookWhite);
      else if(PieceNum == 26 || PieceNum == 31)
            lbl =  new JLabel(this.bishopWhite);
      else if(PieceNum == 27 || PieceNum == 30)
            lbl = new JLabel(this.knightWhite);
      else if(PieceNum == 28)
            lbl = new JLabel(this.queenWhite);
      else if(PieceNum == 29)
            lbl = new JLabel(this.kingWhite);
      else if(PieceNum >= 17 && PieceNum <= 24)
            lbl = new JLabel(this.pawnWhite);
      else
            lbl = new JLabel();
      return lbl;
      }
     
      // and places chess pieces at their right positions
      private void arrangeChessPieces()
      {                      
            for(int y = 0; y < 8; y++)       
            	for(int x = 0; x < 8; x++) 
            {                
                  this.pnlChessCells[y][x].add(this.getPieceObject(Pieces[y][x]), BorderLayout.CENTER);
            }          
      }
      
      // This method draws chess board, i.e. black and white cells on the board
      private void drawChessBoard()
      {
            for (int y = 0; y < 8; y++)
                  for (int x = 0; x < 8; x++)
                  {
                        pnlChessCells[y][x] = new JPanel(new BorderLayout());
                        pnlMain.add(pnlChessCells[y][x]);
                        if (y % 2 == 0)
                              if (x % 2 == 1)
                                    pnlChessCells[y][x].setBackground(Color.LIGHT_GRAY);
                              else
                                    pnlChessCells[y][x].setBackground(Color.WHITE);
                        else
                              if (x % 2 == 0)
                                    pnlChessCells[y][x].setBackground(Color.LIGHT_GRAY);
                              else
                                    pnlChessCells[y][x].setBackground(Color.WHITE);
                  }
      }

}
